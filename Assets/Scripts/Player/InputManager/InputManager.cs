//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/InputManager/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""e4a80a50-9750-48df-bcca-7412f587c273"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e4a1043b-cfe3-4a11-9f81-5a3cb429081b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ce763b7c-8db3-4b01-a4f4-4e6c00cb353a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""55ace125-31e8-49e4-af86-8685422bf48f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Autorun"",
                    ""type"": ""Button"",
                    ""id"": ""e39aad14-e653-4889-a449-c31e7a4d4bfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CharacterAction"",
                    ""type"": ""Button"",
                    ""id"": ""ea779189-af61-4dc0-832b-0a18c7cf5c3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WQSE"",
                    ""id"": ""fa3a2b6b-27e7-43f2-8841-02a05f2d94e4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""be2ff861-c3a1-472c-a8e4-11343114c2e2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""787f7e4a-8958-4a0b-b0bd-5539012c2b26"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3a84ad55-07fc-4e89-9894-883f64c95a62"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bacd1493-7e6d-44d1-9253-9185c61151bb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a9d9b2ad-b01b-4018-925d-4d615941c572"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CharacterAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""7395618d-e87d-490e-98b0-9d659f6adcb7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8e74d228-20c2-47b2-9be7-3839cc78381a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c2c9a131-665e-4668-94bc-7f16aa063d38"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""612b3f88-fcdb-4ffa-a009-158eb5c5b5c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbbf202f-1a1d-4221-a98e-56b7bff9a801"",
                    ""path"": ""<Keyboard>/numLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Autorun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseInput"",
            ""id"": ""77eff67d-bd54-4b30-9f60-4db5601f01aa"",
            ""actions"": [
                {
                    ""name"": ""MouseAction"",
                    ""type"": ""Button"",
                    ""id"": ""0e7a4c38-42f4-49e4-a538-93b76020e4f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""53624af0-9648-43fc-8564-718416017556"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse0"",
                    ""type"": ""Button"",
                    ""id"": ""b8b99408-cf32-4d49-8f5a-f8b0edfafffd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse1"",
                    ""type"": ""Button"",
                    ""id"": ""78ae62eb-eadb-411c-82cd-1401f16a5b31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""MouseScroll"",
                    ""id"": ""3c34f927-2aaa-42c2-8e5c-83c7b4c62976"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d059020d-357f-44b2-8ac5-5ed6acabb2f4"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2d04e89d-ea2a-4525-99c0-00a7f9ab9412"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""261bcedb-c31b-4cb5-93b5-558a9c8bf68a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffb2a981-ba3b-441b-8811-84690857ab8f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39b3f7b9-d499-43f9-ba3c-18857c44d01d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""33176d03-d731-4e8e-b3a4-aca818bd4118"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""57e8b575-7e98-4f89-af5c-d42eb94d2f64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""483d967d-438a-42c2-8c46-d0a9225a2eac"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
        m_Movement_Rotation = m_Movement.FindAction("Rotation", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Autorun = m_Movement.FindAction("Autorun", throwIfNotFound: true);
        m_Movement_CharacterAction = m_Movement.FindAction("CharacterAction", throwIfNotFound: true);
        // MouseInput
        m_MouseInput = asset.FindActionMap("MouseInput", throwIfNotFound: true);
        m_MouseInput_MouseAction = m_MouseInput.FindAction("MouseAction", throwIfNotFound: true);
        m_MouseInput_MouseDelta = m_MouseInput.FindAction("MouseDelta", throwIfNotFound: true);
        m_MouseInput_Mouse0 = m_MouseInput.FindAction("Mouse0", throwIfNotFound: true);
        m_MouseInput_Mouse1 = m_MouseInput.FindAction("Mouse1", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Movement;
    private readonly InputAction m_Movement_Rotation;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Autorun;
    private readonly InputAction m_Movement_CharacterAction;
    public struct MovementActions
    {
        private @InputManager m_Wrapper;
        public MovementActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputAction @Rotation => m_Wrapper.m_Movement_Rotation;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Autorun => m_Wrapper.m_Movement_Autorun;
        public InputAction @CharacterAction => m_Wrapper.m_Movement_CharacterAction;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRotation;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Autorun.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnAutorun;
                @Autorun.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnAutorun;
                @Autorun.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnAutorun;
                @CharacterAction.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnCharacterAction;
                @CharacterAction.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnCharacterAction;
                @CharacterAction.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnCharacterAction;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Autorun.started += instance.OnAutorun;
                @Autorun.performed += instance.OnAutorun;
                @Autorun.canceled += instance.OnAutorun;
                @CharacterAction.started += instance.OnCharacterAction;
                @CharacterAction.performed += instance.OnCharacterAction;
                @CharacterAction.canceled += instance.OnCharacterAction;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // MouseInput
    private readonly InputActionMap m_MouseInput;
    private IMouseInputActions m_MouseInputActionsCallbackInterface;
    private readonly InputAction m_MouseInput_MouseAction;
    private readonly InputAction m_MouseInput_MouseDelta;
    private readonly InputAction m_MouseInput_Mouse0;
    private readonly InputAction m_MouseInput_Mouse1;
    public struct MouseInputActions
    {
        private @InputManager m_Wrapper;
        public MouseInputActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseAction => m_Wrapper.m_MouseInput_MouseAction;
        public InputAction @MouseDelta => m_Wrapper.m_MouseInput_MouseDelta;
        public InputAction @Mouse0 => m_Wrapper.m_MouseInput_Mouse0;
        public InputAction @Mouse1 => m_Wrapper.m_MouseInput_Mouse1;
        public InputActionMap Get() { return m_Wrapper.m_MouseInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseInputActions set) { return set.Get(); }
        public void SetCallbacks(IMouseInputActions instance)
        {
            if (m_Wrapper.m_MouseInputActionsCallbackInterface != null)
            {
                @MouseAction.started -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouseAction;
                @MouseAction.performed -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouseAction;
                @MouseAction.canceled -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouseAction;
                @MouseDelta.started -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouseDelta;
                @Mouse0.started -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouse0;
                @Mouse0.performed -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouse0;
                @Mouse0.canceled -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouse0;
                @Mouse1.started -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouse1;
                @Mouse1.performed -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouse1;
                @Mouse1.canceled -= m_Wrapper.m_MouseInputActionsCallbackInterface.OnMouse1;
            }
            m_Wrapper.m_MouseInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseAction.started += instance.OnMouseAction;
                @MouseAction.performed += instance.OnMouseAction;
                @MouseAction.canceled += instance.OnMouseAction;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @Mouse0.started += instance.OnMouse0;
                @Mouse0.performed += instance.OnMouse0;
                @Mouse0.canceled += instance.OnMouse0;
                @Mouse1.started += instance.OnMouse1;
                @Mouse1.performed += instance.OnMouse1;
                @Mouse1.canceled += instance.OnMouse1;
            }
        }
    }
    public MouseInputActions @MouseInput => new MouseInputActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @InputManager m_Wrapper;
        public UIActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAutorun(InputAction.CallbackContext context);
        void OnCharacterAction(InputAction.CallbackContext context);
    }
    public interface IMouseInputActions
    {
        void OnMouseAction(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMouse0(InputAction.CallbackContext context);
        void OnMouse1(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
